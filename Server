#sdfsdfsdf

#receive

#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

#define CEPIN 9
#define CSNPIN 10
#define ADDRESS 0xF0F0F0E1LL

RF24 radio(CEPIN, CSNPIN);

void setup() {
  Serial.begin(9600);
  radio.begin();
  radio.openReadingPipe(0, ADDRESS);
  radio.setPALevel(RF24_PA_MAX);
  radio.startListening();
  pinMode(A0, OUTPUT);
  pinMode(8, OUTPUT);
}

void loop() {

  if (radio.available()) {
    bool currentFireState;
    radio.read(&currentFireState, sizeof(currentFireState));
    Serial.println(currentFireState);

}
#PushBullet

if(currentFirestate) {
  #include <Arduino_LSM6DS3.h>

#include <SPI.h>

#include <WiFiNINA.h>

#include "utility/wifi_drv.h"

 

#define DEVICEID      "v51550220E395C84"

 

const char* ssid = "kim&park";        // WiFi의 SSID 입니다.

const char* pass = "01071128287"; // 비번입니다.

const char* server = "api.pushingbox.com";

 

int status = WL_IDLE_STATUS;

 

 

void setup() {

//시리얼 통신 시작

  Serial.begin(9600);

 


  }

 

// 와이파이 연결시도

  int status = WL_IDLE_STATUS;     // the Wifi radio's status

  WiFiClient client;

 

  while (status != WL_CONNECTED) {

    Serial.print("Attempting to connect to WPA SSID: ");

    Serial.println(ssid);

    // Connect to WPA/WPA2 network:

    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:

    delay(10000);

  }

  // you're connected now, so print out the data:

  Serial.println("You're connected to the network");

}

 

void loop()

{

 

  if (IMU.accelerationAvailable()) {

    IMU.readAcceleration(acc_x, acc_y, acc_z);

    float g = sqrt(acc_x * acc_x + acc_y * acc_y + acc_z * acc_z);

      if( g > 1.5){

        Serial.println("가속도 값이 1.5G를 넘었습니다.");

        wifiMode();

     }

  }

}

 

 

void wifiMode(){

  WiFiClient client;  

 

  if (client.connect(server, 80)) {

    // send the HTTP PUT request

    client.print(F("GET /pushingbox?devid="));

    client.print(DEVICEID);

    client.print(F(" HTTP/1.1\r\n"));

    client.print(F("Host: api.pushingbox.com\r\n"));

    client.print(F("User-Agent: Arduino\r\n"));

    client.print(F("\r\n\r\n"));

  }

  else {

    // if you couldn't make a connection

    Serial.println("Connection failed");

  }

}
}

#echo


//ADDRESS는 NRF 모듈의 통신 주소이다. 송 수신 모두 동일한 값이어야함.
#define ADDRESS 0xF0F0F0E1LL 

bool firedetection = false;  //화재 발생 변수를 설정, 기본값 false

RF24 radio(CEPIN, CSNPIN); // CE, CSN 핀 설정
//const byte address[6] = "00001";

//화재 감지 여부를 전달하는 함수
bool DETERMINATION_FIRED(float DETECTION_FREQ, short SET_CRITICAL_POINT){
  #define LEVELPORT A0
  while (true){
    if (analogRead(LEVELPORT) >= SET_CRITICAL_POINT){return true;}else {return false;}
    delay(DETECTION_FREQ);}}


void setup(){
  radio.begin();
  radio.openWritingPipe(ADDRESS);
  radio.setPALevel(RF24_PA_MIN);  //전송 전력 설정(RF24_PA_LOW of HIGH)
  radio.stopListening();  //모듈을 송신기 상태로 설정한다.
  pinMode(13, OUTPUT);
}

void loop(){
  //const char text[] = "(From) nRF24 Tx: Hello World!";
  //bool firedetection = DETERMINATION_FIRED(2000, 600);

  //if(!firedetection == false){}
  radio.write(&firedetection, sizeof(firedetection));
  delay(1000);
  digitalWrite(13, LOW);  
}
